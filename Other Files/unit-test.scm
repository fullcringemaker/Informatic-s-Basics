(define-syntax test
  (syntax-rules ()
    ((test def res)
      (begin
        (let ((xs (quote def))
              (result res))
          (list xs result))))))
(define (run-test xs)
  (display (car xs))
  (let ((ret (eval (car xs) (interaction-environment)))
        (exp (cadr xs)))
    (if (equal? exp ret)
        (begin (display " ok") #t)
        (begin (display " FAIL")
               (newline)
               (display "  Expected: ")
               (display exp)
               (newline)
               (display "  Returned: ")
               (display ret)
               #f))))
(define (run-tests tests)
  (define (loop try res)
    (if (null? try)
        (begin (newline) res)
        (if (run-test (car try))
            (loop (cdr try) res)
            (loop (cdr try) #f))))
  (loop tests #t))
